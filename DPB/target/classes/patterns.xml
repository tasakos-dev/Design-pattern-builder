<?xml version="1.0" encoding="UTF-8"?>
<GoF xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:noNamespaceSchemaLocation="patterns_schema.xsd">
	<category id="Creational">
		<pattern id="Abstract Factory">
			<description>Provide an interface for creating families of related or dependent objects without specifying their concrete classes.</description>
			<interface id="AbstractFactory" annotation="AbstractFactory">
					<method id="createProductA">
						<type>ProductA</type>
					</method>
					<method id="createProductB">
						<type>ProductB</type>
					</method>
			</interface>
			<interface id="ProductA" annotation="AbstractProduct">
				<method id="doStuff">
					<type>void</type>
				</method>
			</interface>
			<interface id="ProductB" annotation="AbstractProduct">
				<method id="doStuff">
					<type>void</type>
				</method>
			</interface>
			<class id="ConcreteFactory1" implements="AbstractFactory" annotation="ConcreteFactory"></class>
			<class id="ConcreteFactory2" implements="AbstractFactory" annotation="ConcreteFactory"></class>
			<class id="ConcreteProductA1" implements="ProductA" annotation="Product"></class>
			<class id="ConcreteProductA2" implements="ProductA" annotation="Product"></class>
			<class id="ConcreteProductB1" implements="ProductB" annotation="Product"></class>
			<class id="ConcreteProductB2" implements="ProductB" annotation="Product"></class>
			<properties>
				<newClass implements= "AbstractFactory" annotation="ConcreteFactory"/>
				<newClass implements= "ProductA" annotation="Product"/>
				<newClass implements= "ProductB" annotation="Product"/>
				<newMethod belongs="AbstractFactory"/>
			</properties>
		</pattern>
		<pattern id="Builder">
			<description>Separate the construction of a complex object from its representation so that the same construction process can create different representations.</description>
			<interface id="Builder" annotation="Builder">
				<method id="buildPart">
					<type>void</type>
				</method>
			</interface>
			<class id="ConcreteBuilder" implements="Builder" annotation="ConcreteBuilder"></class>
			<class id="Director" annotation="Director">
				<field id="builder">
					<type>Builder</type>
				</field>
				<method id="construct">
					<type>void</type>
					<code>
						/*
							for all objects in structure {
								builder.buildPart();
							}
						*/
						
					</code>
				</method>
			</class>
			<properties>
				<newClass implements="Builder" annotation="ConcreteBuilder"/>
			</properties>
		</pattern>
		<pattern id="Factory Method">
			<description>Define an interface for creating an object, but let subclasses decide which class to instantiate.
			 Factory Method lets a class defer instantiation to subclasses.</description>
			<interface id="Product" annotation="Product">
				<method id="doStuff">
					<type>void</type>
				</method>
			</interface>
			<class id="Creator" isAbstract="true" annotation="Creator">
					<method id="factoryMethodA" isAbstract="true">
						<type>Product</type>
					</method>
					<method id="anOperation">
						<type>void</type>
					</method>
			</class>
			<class id="ConcreteCreator" extends="Creator" annotation="ConcreteCreator"></class>
			<class id="ConcreteProductA" implements="Product" annotation="ConcreteProduct"></class>
			<properties>
				<newClass implements="Product" annotation="ConcreteProduct"/>
				<newMethod belongs="Creator" />
			</properties>
		</pattern>
		<pattern id="Prototype">
			<description>Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.</description>
			<interface id="Prototype" annotation="Prototype">
				<method id="clone">
					<type>Prototype</type>
					<code>
						return super.clone();
					</code>
				</method>
			</interface>
			<class id="ConcretePrototype1" implements="Prototype" annotation="ConcretePrototype">
				<method id="clone">
					<type>Prototype</type>
					<code>
						try {
							return (Prototype) super.clone();
						} catch (CloneNotSupportedException e) {
							e.printStackTrace();
						}
						return null;
					</code>
				</method>
			</class>
			<class id="ConcretePrototype2" implements="Prototype" annotation="ConcretePrototype">
				<method id="clone">
					<type>Prototype</type>
					<code>
						try {
							return (Prototype) super.clone();
						} catch (CloneNotSupportedException e) {
							e.printStackTrace();
						}
						return null;
					</code>
				</method>
			</class>
			<class id="Client" annotation="Client">
				<field id="prototype">
					<type>
						Prototype
					</type>
				</field>
				<method id="operation">
					<type>void</type>
					<code>
						Prototype p = null;
						p = prototype.clone();
					</code>
				</method>
			</class>
			<properties>
				<newClass implements="Prototype" annotation="ConcretePrototype"/>
			</properties>
		</pattern>
		<pattern id="Singleton">
			<description>Ensure a class only has one instance, and provide a global point of access to it.</description>
			<class id="Singleton" annotation="Singleton">
				<field id="instance" isStatic="true">
					<type>Singleton</type>
				</field>
				<method id="Singleton" visibility="private">
					<type></type>
				</method>
				<method id="getInstance" isStatic="true">
					<type>Object</type>
					<code>
						if (instance == null) {
							instance = new Singleton();
						}
						return instance;
					</code>
				</method>
			</class>
		</pattern>
	</category>
	<category id="Structural">
		<pattern id="Object Adapter">
			<description>Convert the interface of a class into another interface clients expect.
			 Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.</description>
			<interface id="Target" annotation="Target">
				<method id="request">
					<type>void</type>
				</method>				
			</interface>
			<class id="Adapter" implements="Target" annotation="Adapter">
				<field id="adaptee"><type>Adaptee</type></field>
				<method id="request">
					<type>void</type>
					<code>
						adaptee.specificRequest();
					</code>
				</method>	
			</class>
			<class id="Adaptee" annotation="Adaptee">
				<method id="specificRequest">
					<type>void</type>
				</method>	
			</class>
			<class id="Client" annotation="Client">
				<field id="target">
					<type>Target</type>
				</field>
			</class>
		</pattern>
		<pattern id="Class Adapter">
			<description>Convert the interface of a class into another interface clients expect.
			 Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.</description>
			<interface id="Target" annotation="Target">
				<method id="request">
					<type>void</type>
				</method>				
			</interface>
			<class id="Adapter" implements="Target" extends="Adaptee" annotation="Adapter">
				<method id="request">
					<type>void</type>
					<code>
						super.specificRequest();
					</code>
				</method>	
			</class>
			<class id="Adaptee" annotation="Adaptee">
				<method id="specificRequest">
					<type>void</type>
				</method>	
			</class>
			<class id="Client" annotation="Client">
				<field id="target">
					<type>Target</type>
				</field>
			</class>
		</pattern>
		<pattern id="Bridge">
			<description>Decouple an abstraction from its implementation so that the two can vary independently.</description>
			<interface id="Implementor" annotation="Implementor">
				<method id="operationImp">
					<type>void</type>
				</method>
			</interface>
			<class id="Abstraction" annotation="Abstraction">
				<field id="imp">
					<type>Implementor</type>
				</field>
				<method id="operation">
					<type>void</type>
					<code>
						imp.operationImp();
					</code>
				</method>
			</class>
			<class id="RefinedAbstraction" extends="Abstraction" annotation="RefinedAbstraction"></class>
			<class id="ConcreteImplementorA" implements="Implementor" annotation="ConcreteImplementor"></class>
			<class id="ConcreteImplementorB" implements="Implementor" annotation="ConcreteImplementor"></class>
			<properties>
				<newClass implements="Implementor" annotation="ConcreteImplementor"/>
			</properties>			
		</pattern>
		<pattern id="Composite">
			<description>Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.</description>
			<interface id="Component" annotation="Component">
				<method id="operation">
					<type>void</type>
				</method>
			</interface>
			<class id="Leaf" implements="Component" annotation="Leaf"></class>
			<class id="Composite" implements="Component" annotation="Composite">
				<field id="children"><type>Component[]</type></field>
				<method id="add">
					<type>void</type>
					<parameter id="c"><type>Component</type></parameter>
				</method>
				<method id="remove">
					<type>void</type>
					<parameter id="c"><type>Component</type></parameter>
				</method>
				<method id="getChildren">
					<type>Component</type>
					<parameter id="id"><type>int</type></parameter>
				</method>
			</class>
			<properties>
				<newClass implements="Component" annotation="Leaf"/>
				<newMethod belongs="Composite"/>
			</properties>
		</pattern>
		<pattern id="Decorator">
			<description>Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.</description>
			<interface id="Component" annotation="Component">
				<method id="operation"><type>void</type></method>
			</interface>
			<class id="ConcreteComponent" implements="Component" annotation="ConcreteComponent"></class>
			<class id="Decorator" implements="Component" isAbstract="false" annotation="Decorator">
				<field id="component"><type>Component</type></field>
				<method id="operation">
					<type>void</type>
					<code>component.operation();</code>
				</method>
			</class>
			<class id="ConcreteDecoratorA" extends="Decorator" annotation="ConcreteDecorator">
				<method id="addedBehavior"><type>void</type></method>
				<method id="operation">
					<type>void</type>
					<code>
						super.operation();
						addedBehavior();
					</code>
				</method>
			</class>
			<class id="ConcreteDecoratorB" extends="Decorator" annotation="ConcreteDecorator">
				<field id="addedState"><type>Object</type></field>
				<method id="operation">
					<type>void</type>
					<code>
						super.operation();
					</code>
				</method>
			</class>
			<properties>
				<newClass implements="Decorator" annotation="ConcreteDecorator"/>
			</properties>
		</pattern>
		<pattern id="Facade">
			<description>Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.</description>
			<class id="Subsystem1" annotation="Subsystem">
				<method id="operation">
					<type>void</type>
				</method>
			</class>
			<class id="Facade" annotation="Facade">
				<field id="subsystem1"><type>Subsystem1</type></field>
				<method id="subsystemOperation">
					<type>void</type>
					<code>
						subsystem.operation();
					</code>
					</method>
			</class>
			<properties>
				<newMethod belongs="Facade"/>
			</properties>
		</pattern>
		<pattern id="Flyweight">
			<description>Use sharing to support large numbers of fine-grained objects efficiently.</description>
			<class id="Flyweight" isAbstract="true" annotation="Flyweight">
				<field id="repeatingState"><type>Object</type></field>
				<method id="operation" isAbstract="true">
					<type>void</type>
					<parameter id="extinsicState"><type>Object</type></parameter>
				</method>
			</class>
			<class id="FlyweightFactory" annotation="FlyweightFactory">
				<field id="flyweights"><type>Flyweight[]</type></field>
				<method id="getFlyweight">
					<type>Flyweight</type>
					<parameter id="key"><type>int</type></parameter>
					<code>
						if (flyweights[key] == null) {
							flyweights[key] = new ConcreteFlyweight();
						}
						return flyweights[key];
					</code>
				</method>
			</class>
			<class id="ConcreteFlyweight" extends="Flyweight" annotation="ConcreteFlyweight">
				<field id="intrinsicState"><type>Object</type></field>
			</class>
			<class id="UnsharedConcreteFlyweight" extends="Flyweight" annotation="UnsharedConcreteFlyweight">
				<field id="allState"><type>Object</type></field>
			</class>
			<properties>
				<newMethod belongs="ConcreteFlyweight"/>
				<newMethod belongs="UnsharedConcreteFlyweight"/>
			</properties>
		</pattern>
		<pattern id="Proxy">
			<description>Provide a surrogate or placeholder for another object to control access to it.</description>
			<interface id="Subject" annotation="Subject"> 
				<method id="request">
					<type>void</type>
				</method>
			</interface>
			<class id="Proxy" implements="Subject" annotation="Proxy">
				<field id="realSubject"><type>RealSubject</type></field>
				<method id="checkAccess"><type>boolean</type>
					<code>
						return false;
					</code>
				</method>
				<method id="request">
					<type>void</type>
					<code>
						if (checkAccess()){
							realService.request();
						}
					</code>
				</method>
			</class>
			<class id="RealSubject" implements="Subject" annotation="RealService">
			</class>
			<properties>
				<newMethod belongs="Subject"/>
				<newMethod belongs="Proxy"/>
				<newMethod belongs="RealSubject"/>
			</properties>
		</pattern>
		
	</category>
	<category id="Behavioral">
		<pattern id="Chain of Responsibility">
			<description>Avoid coupling the sender of a request to its receiver by 
			giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.</description>
			<class id="Handler" annotation="Handler" isAbstract="true">
				<field id="successor"><type>Handler</type></field>
				<method id="setSuccessor">
					<type>void</type>
					<parameter id="successor1"><type>Handler</type></parameter>
					<code>
						this.successor = successor1;
					</code>
				</method>
				<method id="handleRequest" isAbstract="true">
					<type>void</type>
				</method>
			</class>
			<class id="ConcreteHandler1" extends="Handler" annotation="ConcreteHandler">
				<!-- <method id="handleRequest">
					<type>void</type>
				</method> -->
			</class>
			<class id="ConcreteHandler2" extends="Handler" annotation="ConcreteHandler">
				<!-- <method id="handleRequest">
					<type>void</type>
				</method> -->
			</class>
			<properties>
				<newClass implements="Handler" annotation="ConcreteHandler"/>
			</properties>			
		</pattern>
		<pattern id="Command">
			<description>Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.</description>
			<interface id="Command" annotation="Command">
				<method id="execute">
					<type>void</type>
				</method>
			</interface>
			<class id="ConcreteCommand" implements="Command" annotation="ConcreteCommand">
				<field id="state"><type>Object</type></field>
				<field id="receiver"><type>Receiver</type></field>
				<method id="execute">
					<type>void</type>
					<code>
						receiver.action();
					</code>
				</method>
			</class>
			<class id="Receiver" annotation="Receiver">
				<method id="action">
					<type>void</type>
				</method>
			</class>
			<class id="Invoker" annotation="Invoker">
				<field id="command"><type>Command</type></field>
				<method id="setCommand">
					<type>void</type>
					<parameter id="command"><type>Command</type></parameter>
					<code>
						this.command = command;
					</code>
				</method>
				<method id="executeCommand">
					<type>void</type>
					<code>
						command.execute();
					</code>
				</method>
			</class>
			<properties>
				<newMethod belongs="ConcreteCommand"/>
			</properties>
		</pattern>
		<pattern id="Interpreter">
			<description>Given a language, define a represention for its grammar along with an interpreter that uses the representation to interpret sentences in the language.</description>
			<interface id="AbstractExpression" annotation="AbstractExpression">
				<method id="interpret">
					<type>void</type>
					<parameter id="context"><type>Context</type></parameter>
				</method>
			</interface>
			<class id="TerminalExpression" implements="AbstractExpression" annotation="TerminalExpression"></class>
			<class id="NonTerminalExpression" implements="AbstractExpression" annotation="NonTerminalExpression">
				<field id="expression"><type>AbstractExpression</type></field>
			</class>
			<class id="Context" annotation="Context"></class>
			<class id="Client" annotation="Client">
				<field id="context"><type>Context</type></field>
				<field id="expr"><type>AbstractExpression</type></field>
			</class>
			<properties>
				<newClass implements="AbstractExpression" annotation="TerminalExpression"/>
			</properties>
		</pattern>
		<pattern id="Iterator">
			<description>Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.</description>
			<interface id="Iterator" annotation="Iterator">
				<method id="getNext">
					<type>Object</type>
				</method>
				<method id="hasNext">
					<type>boolean</type>
				</method>
			</interface>
			<class id="ConcreteIterator" implements="Iterator" annotation="ConcreteIterator">
				<field id="collection"><type>ConcreteCollection</type></field>
				<field id="iterationState"><type>Object</type></field>
				<method id="ConcreteIterator">
					<type></type>
					<parameter id="c"><type>ConcreteCollection</type></parameter>
					<code>
						this.collection = c;
					</code>
				</method>
				<method id="hasNext">
					<type>boolean</type>
					<code>return false;</code>
				</method>
			</class>
			<interface id="Collection" annotation="Aggregate">
				<method id="createIterator">
					<type>Iterator</type>
				</method>
			</interface>
			<class id="ConcreteCollection" implements="Collection" annotation="ConcreteAggregate"></class>	
		</pattern>
		<pattern id="Mediator">
			<description>Define an object that encapsulates how a set of objects interact.
			 Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.</description>
			<interface id="Mediator" annotation="Mediator">
				<method id="mediate">
					<type>void</type>
					<parameter id="colleague"><type>Colleague</type></parameter>
				</method>
			</interface>
			<class id="ConcreteMediator" implements="Mediator" annotation="ConcreteMediator">
				<field id="concreteColleague1"><type>ConcreteColleague1</type></field>
				<field id="concreteColleague2"><type>ConcreteColleague2</type></field>
			</class>
			<class id="Colleague" isAbstract="false" annotation="Colleague">
				<field id="mediator"><type>Mediator</type></field>
				<method id="operation">
					<type>void</type>
					<code>
						mediator.mediate(this);
					</code>
				</method>
			</class>
			<class id="ConcreteColleague1" extends="Colleague" annotation="ConcreteColleague"></class>
			<class id="ConcreteColleague2" extends="Colleague" annotation="ConcreteColleague"></class>
			<properties>
				<newClass implements="Colleague" annotation="ConcreteColleague"/>
			</properties>
		</pattern>
		<pattern id="Memento">
			<description>Without violating encapsulation, capture and externalize an object's internal state so that the object can be restored to this state later.</description>
			<class id="Originator" annotation="Originator">
				<field id="state">
					<type>Object</type>
				</field>
				<method id="setMemento">
					<type>void</type>
					<parameter id="m">
						<type>Memento</type>
					</parameter>
					<code>state = m.getState();</code>
				</method>
				<method id="createMemento">
					<type>Memento</type>
					<code>return new Memento(state);</code>
				</method>
			</class>
			<class id="Memento" annotation="Memento">
				<field id="state"><type>Object</type></field>
				<method id="Memento">
					<type></type>
					<parameter id="state">
						<type>Object</type>
					</parameter>
					<code>this.state = state;</code>
				</method>
				<method id="getState">
					<type>Object</type>
					<code>return state;</code>
				</method>
				<method id="setState">
					<type>void</type>
					<parameter id="state">
						<type>Object</type>
					</parameter>
					<code>this.state = state;</code>
				</method>
			</class>
			<class id="Caretaker" annotation="Caretaker">
				<field id="memento"><type>Memento</type></field>
			</class>
		</pattern>
		<pattern id="Observer">
			<description> Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.</description>
			<class id="Subject" annotation="Subject">
				<field id="observers"><type>Observer[]</type></field>
				<method id="attach">
					<type>void</type>
					<parameter id="o"><type>Observer</type></parameter>
					<code>// observers.add(o);</code>
				</method>
				<method id="detach">
					<type>void</type>
					<parameter id="o"><type>Observer</type></parameter>
					<code>// observers.remove(o);</code>
				</method>
				<method id="notifyObservers">
					<type>void</type>
					<code>
						for (Observer o: observers) {
							o.update();
						}
					</code>
				</method>
			</class>
			<class id="ConcreteSubject" extends="Subject" annotation="ConcreteSubject">
				<field id="subjectState"><type>Object</type></field>
				<method id="getState">
					<type>Object</type>
					<code>
						return subjectState;
					</code>
				</method>
				<method id="setState">
					<type>void</type>
					<parameter id="subjectState"><type>Object</type></parameter>
					<code>
						this.subjectState = subjectState;
					</code>
				</method>
			</class>
			<interface id="Observer" annotation="Observer">
				<method id="update">
					<type>void</type>
				</method>
			</interface>
			<class id="ConcreteObserver" implements="Observer" annotation="ConcreteObserver">
				<field id="observerState"><type>Object</type></field>
				<field id="subject"><type>ConcreteSubject</type></field>
				<method id="update">
					<type>void</type>
					<code>observerState = subject.getState();</code>
				</method>
			</class>
			<properties>
				<newClass implements="Observer" annotation="ConcreteObserver"/>
				<newClass implements="Subject" annotation="ConcreteSubject"/>
			</properties>
		</pattern>
		<pattern id="State">
			<description>Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.</description>
			<class id="Context" annotation="Context">
				<field id="state"><type>State</type></field>
				<method id="request">
					<type>void</type>
					<code>
						state.handle();
					</code>
				</method>
			</class>
			<interface id="State" annotation="State">
				<method id="handle"><type>void</type></method>
			</interface>
			<class id="ConcreteStateA" implements="State" annotation="ConcreteState"></class>
			<class id="ConcreteStateB" implements="State" annotation="ConcreteState"></class>
			<properties>
				<newClass implements="State" annotation="ConcreteState"/>
			</properties>
		</pattern>
		<pattern id="Strategy">
			<description> Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.</description>
			<interface id="Strategy" annotation="Strategy">
				<method id="algorithmInterface">
					<type>void</type>
				</method>
			</interface>
			<class id="ConcreteStrategyA" implements="Strategy" annotation="ConcreteStrategy"></class>
			<class id="ConcreteStrategyB" implements="Strategy" annotation="ConcreteStrategy"></class>
			<class id="ConcreteStrategyC" implements="Strategy" annotation="ConcreteStrategy"></class>
			<class id="Context" annotation="Context">
				<field id="strategy">
					<type>Strategy</type>
				</field>
				<method id="contextInterface">
					<type>void</type>
				</method>
			</class>
			<properties>
				<newClass implements="Strategy" annotation="ConcreteStrategy"/>
			</properties>
		</pattern>
		<pattern id="Template Method">
			<description>Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.</description>
			<class id="AbstractClass" isAbstract="true" annotation="Abstractlass">
				<method id="templateMethod">
					<type>void</type>
					<code>
						primitiveOperation1();
						primitiveOperation2();
						primitiveOperation3();
					</code>
				</method>
				<method id="primitiveOperation1" visibility="private">
					<type>void</type>
				</method>
				<method id="primitiveOperation2" visibility="protected" isAbstract="true">
					<type>void</type>
				</method>
				<method id="primitiveOperation3" visibility="protected" isAbstract="true">
					<type>void</type>
				</method>
			</class>
			<class id="ConcreteClassA" extends="AbstractClass" annotation="ConcreteAbstractClass"></class>
			<class id="ConcreteClassB" extends="AbstractClass" annotation="ConcreteAbstractClass"></class>
			<properties>
				<newClass implements="AbstractClass" annotation="ConcreteAbstractClass"/>
				<newMethod belongs="AbstractClass"/>
			</properties>
		</pattern>
		<pattern id="Visitor">
			<description>Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.</description>
			<interface id="Visitor" annotation="Visitor">
				<method id="visitConcreteElementA">
					<type>void</type>
					<parameter id="concreteElementA"><type>ConcreteElementA</type></parameter>
				</method>
				<method id="visitConcreteElementB">
					<type>void</type>
					<parameter id="concreteElementB"><type>ConcreteElementB</type></parameter>
				</method>
			</interface>
			<interface id="Element" annotation="Element">
				<method id="accept">
					<type>void</type>
					<parameter id="visitor"><type>Visitor</type></parameter>
				</method>
			</interface>
			<class id="ConcreteVisitor1" implements="Visitor" annotation="ConcreteVisitor"></class>
			<class id="ConcreteVisitor2" implements="Visitor" annotation="ConcreteVisitor"></class>
			<class id="ConcreteElementA" implements="Element" annotation="ConcreteElement">
				<method id="accept">
					<type>void</type>
					<parameter id="visitor"><type>Visitor</type></parameter>
					<code>visitor.visitConcreteElementA(this);</code>
				</method>
				<method id="operationA">
					<type>void</type>
				</method>
			</class>
			<class id="ConcreteElementB" implements="Element" annotation="ConcreteElement">
				<method id="accept">
					<type>void</type>
					<parameter id="visitor"><type>Visitor</type></parameter>
					<code>visitor.visitConcreteElementB(this);</code>
				</method>
				<method id="operationB">
					<type>void</type>
				</method>
			</class>
			<class id="ObjectStructure" annotation="ObjectStructure">
				<field id="element"><type>Element</type></field>
			</class>
			<class id="Client" annotation="Client">
				<field id="objectStructure"><type>ObjectStructure</type></field>
				<field id="visitor"><type>Visitor</type></field>
			</class>
			<properties>
			<newClass implements="Visitor" annotation="ConcreteVisitor"/>
				<newClass implements="Element" annotation="ConcreteElement"/>
			</properties>
		</pattern>
	</category>
</GoF>